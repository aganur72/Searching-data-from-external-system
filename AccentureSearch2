import { LightningElement, track } from 'lwc';
import getDataFromExternalSystem from '@salesforce/apex/ExternalSystemController.getDataFromExternalSystem';

const COLUMNS = [
    { label: 'Int Number', fieldName: 'Airlines_Id__c', dataType: 'text'},
    { label: 'Country', fieldName: 'Country__c', dataType: 'text' },
    { label: 'Name', fieldName: 'Name', dataType: 'text' }
]
export default class AccentureSearch2 extends LightningElement {
    @track externalData = [];   // Track external data for the datatable
    columns = COLUMNS;          // Columns definition for the datatable
    searchId = '';              // Holds the entered ID from the user
    error;                      // Holds the error in case of failure

    // Handle input change for the search ID
    handleInputChange(event) {
        this.searchId = event.target.value; // Capture user input for ID

        // If the input is cleared, also clear the datatable data
        if (!this.searchId) {
            this.externalData = [];
        }
    }

    // Search button handler
    handleSearch() {
        // Call Apex method only if searchId is not empty
        if (this.searchId) {
        getDataFromExternalSystem({ id: this.searchId })
            .then(result => {
                if (result) {
                    // Format result to be used in datatable
                    const rowData = [];
                    rowData.push({
                        Country__c: result.Country__c,
                        Name: result.Name,
                        Airlines_Id__c: result.Airlines_Id__c
                    });
                    this.externalData = rowData; // Set data for the datatable
                }
            })
            .catch(error => {
                this.error = error;
                console.error('Error fetching data:', error);
            });
        } else {
            // Clear externalData if searchId is empty
            this.externalData = [];
        }
    }
}
